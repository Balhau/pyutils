#Utility no interface pkcs11 modules
#This File has defined the interfaces to bind into dll, or shared object files. The idea behind
#this script is enable the possibility to call the api defined in pkcs11 standards.
#The main utility of this script is the possibility to debug and analize pkcs11 modules without the need #to work at C lower level
#
#Author: Vitor Fernandes

from ctypes import *;

#Hard coded import or libraries to apply as example in this example. In this case the
#pkcs11 api selected was the eid pt version

common=CDLL('./libpteidcommon.so.2.0.0')
qtdialogs=CDLL('./libpteiddialogsQT.so.2.0.0')
cardlayer=CDLL('./libpteidcardlayer.so.2.0.0')
p11=CDLL('./libpteidpkcs11.so.2.0.0')



# define return constants

CKR_OK=0x00000000
CKR_CANCEL=0x00000001
CKR_HOST_MEMORY=0x00000002
CKR_SLOT_ID_INVALID=0x00000003
CKR_GENERAL_ERROR=0x00000005
CKR_FUNCTION_FAILED=0x00000006



# define constants and flags
CKF_RW_SESSION=0x00000002
CKF_SERIAL_SESSION=0x00000004
CK_FALSE=0
CK_TRUE=1

CKU_USER=1

CKF_HW=0x00000001
CKF_ENCRYPT=0x00000100
CKF_DECRYPT=0x00000200
CKF_DIGEST=0x00000400
CKF_SIGN=0x00000800
CKF_SIGN_RECOVER=0x00001000
CKF_VERIFY=0x00002000
CKF_VERIFY_RECOVER=0x00004000
CKF_GENERATE=0x00008000
CKF_GENERATE_KEY_PAIR=0x00010000
CKF_WRAP=0x00020000
CKF_UNWRAP=0x00040000
CKF_DERIVE=0x00080000
CKF_EXTENSION=0x80000000

CKF_LIBRARY_CANT_CREATE_OS_THREADS=0x00000001
CKF_OS_LOCKING_OK=0x00000002

CK0_DATA=0x00000000
CKO_CERTIFICATE=0x00000001
CKO_PUBLIC_KEY=0x00000002
CKO_PRIVATE_KEY=0x00000003
CKO_SECRET_KEY=0x00000004
CKO_HW_FEATURE=0x00000005
CKO_DOMAIN_PARAMETERS=0x00000006
CKO_MECHANISM=0x00000007
CKO_VENDOR_DEFINED=0x00000008

CKH_MONOTONIC_COUNTER=0x00000001
CKH_CLOCK=0x00000002
CKH_USER_INTERFACE=0x00000003
CKH_VENDOR_DEFINED=0x80000000






#typedefs interfaces
CK_BYTE=c_char
CK_CHAR=c_char
CK_UTF8CHAR=c_char
CK_BBOOL=CK_BYTE
CK_ULONG=c_ulong
CK_FLAGS=CK_ULONG
CK_ULONG_PTR=POINTER(c_ulong)
CK_BYTE_PTR=c_char_p
CK_CHAR_PTR=c_char_p
CK_UTF8CHAR_PTR=c_char_p
CK_VOID_PTR=c_void_p
CK_VOID_PTR_PTR=POINTER(CK_VOID_PTR)
CK_STATE=CK_ULONG
CK_USER_TYPE=CK_ULONG
CK_OBJECT_HANDLE=CK_ULONG
CK_OBJECT_HANDLE_PTR=POINTER(CK_OBJECT_HANDLE)
CK_ATTRIBUTE_TYPE=CK_ULONG
CK_OBJECT_CLASS=CK_ULONG
CK_HW_FEATURE_TYPE=CK_ULONG
CK_KEY_TYPE=CK_ULONG
CK_CERTIFICATE_TYPE=CK_ULONG
CK_MECHANISM_TYPE=CK_ULONG
CK_SLOT_ID=CK_ULONG
CK_SLOT_ID_PTR=POINTER(CK_SLOT_ID)
CK_SESSION_HANDLE=CK_ULONG
CK_SESSION_HANDLE_PTR=POINTER(CK_ULONG)
CK_NOTIFICATION=CK_ULONG
CK_RV=CK_ULONG

CKA_CLASS=0x00000000
CKA_TOKEN=0x00000001
CKA_PRIVATE=0x00000002
CKA_LABEL=0x00000003
CKA_APPLICATION=0x00000010
CKA_VALUE=0x00000011
CKA_OBJECT_ID=0x00000012
CKA_CERTIFICATE_TYPE=0x00000080
CKA_ISSUER=0x00000081

CKA_SERIAL_NUMBER=0x00000082
CKA_AC_ISSUER=0x00000083
CKA_OWNER=0x00000084
CKA_ATTR_TYPES=0x00000085
CKA_TRUSTED=0x00000086
CKA_CERTIFICATE_CATEGORY=0x00000087
CKA_JAVA_MIDP_SECURITY_DOMAIN=0x00000088
CKA_URL=0x00000089
CKA_HASH_OF_SUBJECT_PUBLIC_KEY=0x0000008A
CKA_HASH_OF_ISSUER_PUBLIC_KEY=0x0000008B
CKA_NAME_HASH_ALGORITHM=0x0000008C
CKA_CHECK_VALUE=0x00000090
CKA_KEY_TYPE=0x00000100
CKA_SUBJECT=0x00000101
CKA_ID=0x00000102
CKA_SENSITIVE=0x00000103
CKA_ENCRYPT=0x00000104
CKA_DECRYPT=0x00000105
CKA_WRAP=0x00000106
CKA_UNWRAP=0x00000107
CKA_SIGN=0x00000108
CKA_SIGN_RECOVER=0x00000109
CKA_VERIFY=0x0000010A
CKA_VERIFY_RECOVER=0x0000010B
CKA_DERIVE=0x0000010C
CKA_START_DATE=0x00000110
CKA_END_DATE=0x00000111
CKA_MODULUS=0x00000120
CKA_MODULUS_BITS=0x00000121
CKA_PUBLIC_EXPONENT=0x00000122
CKA_PRIVATE_EXPONENT=0x00000123
CKA_PRIME_1=0x00000124
CKA_PRIME_2=0x00000125
CKA_EXPONENT_1=0x00000126
CKA_EXPONENT_2=0x00000127
CKA_COEFFICIENT=0x00000128
CKA_PRIME=0x00000130
CKA_SUBPRIME=0x00000131
CKA_BASE=0x00000132
CKA_PRIME_BITS=0x00000133
CKA_SUBPRIME_BITS=0x00000134
CKA_VALUE_BITS=0x00000160
CKA_VALUE_LEN=0x00000161
CKA_EXTRACTABLE=0x00000162
CKA_LOCAL=0x00000163
CKA_NEVER_EXTRACTABLE=0x00000164
CKA_ALWAYS_SENSITIVE=0x00000165
CKA_KEY_GEN_MECHANISM=0x00000166
CKA_MODIFIABLE=0x00000170
CKA_ECDSA_PARAMS=0x00000171
CKA_EC_PARAMS=0x00000180
CKA_EC_POINT=0x00000181
CKA_SECONDARY_AUTH=0x00000200
CKA_AUTH_PIN_FLAGS=0x00000201
CKA_ALWAYS_AUTHENTICATE=0x00000202

CKA_WRAP_WITH_TRUSTED=0x00000210


#Key Manager constants
CKM_RSA_PKCS_KEY_PAIR_GEN=0x00000000
CKM_RSA_PKCS=0x00000001
CKM_RSA_X_509=0x00000003
CKM_MD5_RSA_PKCS=0x00000005
CKM_SHA1_RSA_PKCS=0x00000006
CKM_RSA_PKCS_OAEP=0x00000009
CKM_RSA_PKCS_PSS=0x0000000D
CKM_DSA_KEY_PAIR_GEN=0x00000010
CKM_DSA=0x00000011
CKM_DSA_SHA1=0x00000012
CKM_DH_PKCS_KEY_PAIR_GEN=0x00000020
CKM_DH_PKCS_DERIVE=0x00000021
CKM_SHA256_RSA_PKCS=0x00000040
CKM_SHA384_RSA_PKCS=0x00000041
CKM_SHA512_RSA_PKCS=0x00000042
CKM_SHA256_RSA_PKCS_PSS=0x00000043
CKM_SHA384_RSA_PKCS_PSS=0x00000044
CKM_SHA512_RSA_PKCS_PSS=0x00000045
CKM_SHA224_RSA_PKCS=0x00000046
CKM_SHA224_RSA_PKCS_PSS=0x00000047
CKM_RC4_KEY_GEN=0x00000110
CKM_RC4=0x00000111
CKM_DES_KEY_GEN=0x00000120
CKM_DES_ECB=0x00000121
CKM_DES_CBC=0x00000122
CKM_DES_MAC=0x00000123
CKM_DES2_KEY_GEN=0x00000130
CKM_DES3_KEY_GEN=0x00000131
CKM_DES3_ECB=0x00000132
CKM_DES3_CBC=0x00000133
CKM_DES3_MAC=0x00000134
CKM_MD5=0x00000210
CKM_MD5_HMAC=0x00000211
CKM_SHA_1=0x00000220
CKM_SHA_1_HMAC=0x00000221
CKM_SHA256=0x00000250
CKM_SHA256_HMAC=0x00000251
CKM_SHA224=0x00000255
CKM_SHA224_HMAC=0x00000256
CKM_SHA384=0x00000260
CKM_SHA384_HMAC=0x00000261
CKM_SHA512=0x00000270
CKM_SHA512_HMAC=0x00000271
CKM_GENERIC_SECRET_KEY_GEN=0x00000350
CKM_AES_KEY_GEN=0x00001080
CKM_AES_ECB=0x00001081
CKM_AES_CBC=0x00001082
CKM_AES_MAC=0x00001083
CKM_AES_CTR=0x00001086
CKM_VENDOR_DEFINED=0x80000000
CKMV_AES_CTR=0x80000001

CKMV_IMPLEMENTATION_DEFINED_0=0xC0000000
CKMV_IMPLEMENTATION_DEFINED_1=0xC0000001
CKMV_IMPLEMENTATION_DEFINED_2=0xC0000002
CKMV_IMPLEMENTATION_DEFINED_3=0xC0000003
CKMV_IMPLEMENTATION_DEFINED_4=0xC0000004
CKMV_IMPLEMENTATION_DEFINED_5=0xC0000005
CKMV_IMPLEMENTATION_DEFINED_6=0xC0000006
CKMV_IMPLEMENTATION_DEFINED_7=0xC0000007
CKMV_IMPLEMENTATION_DEFINED_8=0xC0000008
CKMV_IMPLEMENTATION_DEFINED_9=0xC0000009
CKMV_IMPLEMENTATION_DEFINED_10=0xC000000A
CKMV_IMPLEMENTATION_DEFINED_11=0xC000000B
CKMV_IMPLEMENTATION_DEFINED_12=0xC000000C
CKMV_IMPLEMENTATION_DEFINED_13=0xC000000D
CKMV_IMPLEMENTATION_DEFINED_14=0xC000000E
CKMV_IMPLEMENTATION_DEFINED_15=0xC000000F

#Function pointers interfaces


#Structs interfaces
class CK_VERSION(Structure):
	_fields_=[
			('major',CK_BYTE),
			('minor',CK_BYTE)
		 ]


class CK_INFO(Structure):
	_fields_=[
			('cryptokiVersion',CK_VERSION),
			('manufacturerID',CK_UTF8CHAR*32),
			('flags',CK_FLAGS),
			('libraryDescription',CK_UTF8CHAR*32),
			('libraryVersion',CK_VERSION),
		 ]

CK_INFO_PTR=POINTER(CK_INFO)

class CK_SLOT_INFO(Structure):
	_fields_=[
			('slotDescription',CK_UTF8CHAR*64),
			('manufacturerID',CK_UTF8CHAR*32),
			('flags',CK_FLAGS),
			('hardwareVersion',CK_VERSION),
			('firmwareVersion',CK_VERSION)
		 ]

CK_SLOT_INFO_PTR=POINTER(CK_SLOT_INFO)

class CK_TOKEN_INFO(Structure):
	_fields_=[
			('label',CK_UTF8CHAR*32),
			('manufacturerID',CK_UTF8CHAR*32),
			('serialNumber',CK_CHAR*16),
			('flags',CK_FLAGS),
			('ulMaxSessionCount',CK_ULONG),
			('ulSessionCount',CK_ULONG),
			('ulMaxPinLen',CK_ULONG),
			('ulMinPinLen',CK_ULONG),
			('ulTotalPublicMemory',CK_ULONG),
			('ulFreePublicMemory',CK_ULONG),
			('ulTotalPrivateMemory',CK_ULONG),
			('ulFreePrivateMemory',CK_ULONG),
			('hardwareVersion',CK_VERSION),
			('firmwareVersion',CK_VERSION),
			('utcTime',CK_CHAR*16),
		 ]

class CK_SESSION_INFO(Structure):
	_fields_=[
			('slotID',CK_SLOT_ID),
			('state',CK_STATE),
			('flags',CK_FLAGS),
			('ulDeviceError',CK_ULONG)
		 ]

CK_SESSION_INFO_PTR=POINTER(CK_SESSION_INFO)

class CK_ATTRIBUTE(Structure):
	_fields_=[
			('type',CK_ATTRIBUTE_TYPE),
			('pValue',CK_VOID_PTR),
			('ulValueLen',CK_ULONG),
		 ]

CK_ATTRIBUTE_PTR=POINTER(CK_ATTRIBUTE)

class CK_DATE(Structure):
	_fields_=[
			('year',CK_CHAR*4),
			('month',CK_CHAR*2),
			('day',CK_CHAR*2)
		 ]

class CK_MECHANISM(Structure):
	_fields_=[
			('mechanism',CK_MECHANISM_TYPE),
			('pParameter',CK_VOID_PTR),
			('ulParameterLen',CK_ULONG)
		]

CK_MECHANISM_PTR=POINTER(CK_MECHANISM)

class CK_MECHANISM_INFO(Structure):
	_fields_=[
			('ulMinKeySize',CK_ULONG),
			('ulMaxKeySize',CK_ULONG),
			('flags',CK_FLAGS)
		 ]
CK_MECHANISM_INFO_PTR=POINTER(CK_MECHANISM)

#Function pointers for C export API
CK_NOTIFY=CFUNCTYPE(CK_RV,CK_SESSION_HANDLE,CK_NOTIFICATION,CK_VOID_PTR)
CK_C_Initialize = CFUNCTYPE(CK_RV,CK_VOID_PTR)
CK_C_Finalize=CFUNCTYPE(CK_RV,CK_VOID_PTR)
CK_C_GetInfo=CFUNCTYPE(CK_RV,CK_INFO_PTR)
CK_C_GetSlotList=CFUNCTYPE(CK_RV,CK_BBOOL,CK_SLOT_ID_PTR,CK_ULONG_PTR)
CK_C_GetSlotInfo=CFUNCTYPE(CK_RV,CK_SLOT_ID,CK_SLOT_INFO_PTR)
CK_C_GetTokenInfo=CFUNCTYPE(CK_RV,CK_SLOT_ID,CK_SLOT_INFO_PTR)
CK_C_GetMechanismList=CFUNCTYPE(CK_RV,CK_SLOT_ID,CK_SLOT_INFO_PTR)
CK_C_GetMechanismInfo=CFUNCTYPE(CK_RV,CK_SLOT_ID,CK_MECHANISM_TYPE,CK_MECHANISM_INFO_PTR)
CK_C_InitToken=CFUNCTYPE(CK_RV,CK_SLOT_ID,CK_CHAR_PTR,CK_ULONG,CK_CHAR_PTR)
CK_C_InitPIN=CFUNCTYPE(CK_RV,CK_SESSION_HANDLE,CK_CHAR_PTR,CK_ULONG)
CK_C_SetPIN=CFUNCTYPE(CK_RV,CK_RV,CK_SESSION_HANDLE,CK_CHAR_PTR,CK_ULONG,CK_CHAR_PTR,CK_ULONG)
CK_C_OpenSession=CFUNCTYPE(CK_RV,CK_SLOT_ID,CK_FLAGS,CK_VOID_PTR,CK_NOTIFY,CK_SESSION_HANDLE_PTR)
CK_C_CloseSession=CFUNCTYPE(CK_RV,CK_SESSION_HANDLE)
CK_C_CloseAllSessions=CFUNCTYPE(CK_RV,CK_SLOT_ID)
CK_C_GetSessionInfo=CFUNCTYPE(CK_RV,CK_SESSION_HANDLE,CK_SESSION_INFO_PTR)
CK_C_GetOperationState=CFUNCTYPE(CK_RV,CK_SESSION_HANDLE,CK_BYTE_PTR,CK_ULONG_PTR)
CK_C_SetOperationState=CFUNCTYPE(CK_RV,CK_SESSION_HANDLE,CK_BYTE_PTR,CK_ULONG,CK_OBJECT_HANDLE,CK_OBJECT_HANDLE)
CK_C_Login=CFUNCTYPE(CK_RV,CK_SESSION_HANDLE,CK_USER_TYPE,CK_CHAR_PTR,CK_ULONG)
CK_C_Logout=CFUNCTYPE(CK_RV,CK_SESSION_HANDLE)
CK_C_CreateObject=CFUNCTYPE(CK_RV,CK_SESSION_HANDLE,CK_ATTRIBUTE_PTR,CK_ULONG,CK_OBJECT_HANDLE_PTR)
CK_C_CopyObject=CFUNCTYPE(CK_RV,CK_SESSION_HANDLE,CK_OBJECT_HANDLE,CK_ATTRIBUTE_PTR,CK_ULONG,CK_OBJECT_HANDLE_PTR)
CK_C_DestroyObject=CFUNCTYPE(CK_RV,CK_SESSION_HANDLE,CK_OBJECT_HANDLE)
CK_C_GetObjectSize=CFUNCTYPE(CK_RV,CK_SESSION_HANDLE,CK_OBJECT_HANDLE,CK_ULONG_PTR)
CK_C_GetAttributeValue=CFUNCTYPE(CK_RV,CK_SESSION_HANDLE,CK_OBJECT_HANDLE,CK_ATTRIBUTE_PTR,CK_ULONG)
CK_C_SetAttributeValue=CFUNCTYPE(CK_RV,CK_SESSION_HANDLE,CK_OBJECT_HANDLE,CK_ATTRIBUTE_PTR,CK_ULONG)
CK_C_FindObjectsInit=CFUNCTYPE(CK_RV,CK_SESSION_HANDLE,CK_ATTRIBUTE_PTR,CK_ULONG)
CK_C_FindObjects=CFUNCTYPE(CK_RV,CK_SESSION_HANDLE,CK_OBJECT_HANDLE_PTR,CK_ULONG,CK_ULONG_PTR)
CK_C_FindObjectsFinal=CFUNCTYPE(CK_RV,CK_SESSION_HANDLE)
CK_C_EncryptInit=CFUNCTYPE(CK_RV,CK_SESSION_HANDLE,CK_MECHANISM_PTR,CK_OBJECT_HANDLE)
CK_C_Encrypt=CFUNCTYPE(CK_RV,CK_SESSION_HANDLE,CK_BYTE_PTR,CK_ULONG,CK_BYTE_PTR,CK_ULONG_PTR)
CK_C_EncryptUpdate=CFUNCTYPE(CK_RV,CK_SESSION_HANDLE,CK_BYTE_PTR,CK_ULONG,CK_BYTE_PTR,CK_ULONG_PTR)
CK_C_EncryptFinal=CFUNCTYPE(CK_RV,CK_SESSION_HANDLE,CK_BYTE_PTR,CK_ULONG_PTR)
CK_C_DecryptInit=CFUNCTYPE(CK_RV,CK_SESSION_HANDLE,CK_MECHANISM_PTR,CK_OBJECT_HANDLE)
CK_C_Decrypt=CFUNCTYPE(CK_RV,CK_SESSION_HANDLE,CK_BYTE_PTR,CK_ULONG,CK_BYTE_PTR,CK_ULONG_PTR)
CK_C_DecryptUpdate=CFUNCTYPE(CK_RV,CK_SESSION_HANDLE,CK_BYTE_PTR,CK_ULONG,CK_BYTE_PTR,CK_ULONG_PTR)
CK_C_DecryptFinal=CFUNCTYPE(CK_RV,CK_SESSION_HANDLE,CK_BYTE_PTR,CK_ULONG_PTR)
CK_C_DigestInit=CFUNCTYPE(CK_RV,CK_SESSION_HANDLE,CK_MECHANISM_PTR)
CK_C_Digest=CFUNCTYPE(CK_RV,CK_SESSION_HANDLE,CK_BYTE_PTR,CK_ULONG,CK_BYTE_PTR,CK_ULONG_PTR)
CK_C_DigestUpdate=CFUNCTYPE(CK_RV,CK_SESSION_HANDLE,CK_BYTE_PTR,CK_ULONG)
CK_C_DigestKey=CFUNCTYPE(CK_RV,CK_SESSION_HANDLE,CK_OBJECT_HANDLE)
CK_C_DigestFinal=CFUNCTYPE(CK_RV,CK_SESSION_HANDLE,CK_BYTE_PTR,CK_ULONG_PTR)
CK_C_SignInit=CFUNCTYPE(CK_RV,CK_SESSION_HANDLE,CK_MECHANISM_PTR,CK_OBJECT_HANDLE)
CK_C_Sign=CFUNCTYPE(CK_RV,CK_SESSION_HANDLE,CK_BYTE_PTR,CK_ULONG,CK_BYTE_PTR,CK_ULONG_PTR)
CK_C_SignUpdate=CFUNCTYPE(CK_RV,CK_SESSION_HANDLE,CK_BYTE_PTR,CK_ULONG)
CK_C_SignFinal=CFUNCTYPE(CK_RV,CK_BYTE_PTR,CK_ULONG_PTR)
CK_C_SignRecoverInit=CFUNCTYPE(CK_RV,CK_SESSION_HANDLE,CK_MECHANISM_PTR,CK_OBJECT_HANDLE)
CK_C_SignRecover=CFUNCTYPE(CK_RV,CK_SESSION_HANDLE,CK_BYTE_PTR,CK_ULONG,CK_BYTE_PTR,CK_ULONG_PTR)
CK_C_VerifyInit=CFUNCTYPE(CK_RV,CK_SESSION_HANDLE,CK_MECHANISM_PTR,CK_OBJECT_HANDLE)
CK_C_Verify=CFUNCTYPE(CK_RV,CK_SESSION_HANDLE,CK_BYTE_PTR,CK_ULONG,CK_BYTE_PTR,CK_ULONG)
CK_C_VerifyUpdate=CFUNCTYPE(CK_RV,CK_SESSION_HANDLE,CK_BYTE_PTR,CK_ULONG)
CK_C_VerifyFinal=CFUNCTYPE(CK_RV,CK_SESSION_HANDLE,CK_BYTE_PTR,CK_ULONG)
CK_C_VerifyRecoverInit=CFUNCTYPE(CK_RV,CK_SESSION_HANDLE,CK_MECHANISM_PTR,CK_OBJECT_HANDLE)
CK_C_VerifyRecover=CFUNCTYPE(CK_RV,CK_SESSION_HANDLE,CK_MECHANISM_PTR,CK_OBJECT_HANDLE)
CK_C_DigestEncryptUpdate=CFUNCTYPE(CK_RV,CK_SESSION_HANDLE,CK_BYTE_PTR,CK_ULONG,CK_BYTE_PTR,CK_ULONG_PTR)
CK_C_DecryptDigestUpdate=CFUNCTYPE(CK_RV,CK_SESSION_HANDLE,CK_BYTE_PTR,CK_ULONG,CK_BYTE_PTR,CK_ULONG_PTR)
CK_C_SignEncryptUpdate=CFUNCTYPE(CK_RV,CK_SESSION_HANDLE,CK_BYTE_PTR,CK_ULONG,CK_BYTE_PTR,CK_ULONG_PTR)
CK_C_DecryptVerifyUpdate=CFUNCTYPE(CK_RV,CK_SESSION_HANDLE,CK_BYTE_PTR,CK_ULONG,CK_BYTE_PTR,CK_ULONG_PTR)
CK_C_GenerateKey=CFUNCTYPE(CK_RV,CK_SESSION_HANDLE,CK_MECHANISM_PTR,CK_ATTRIBUTE_PTR,CK_ULONG,CK_OBJECT_HANDLE_PTR)
CK_C_GenerateKeyPair=CFUNCTYPE(CK_RV,CK_SESSION_HANDLE,CK_MECHANISM_PTR,CK_ATTRIBUTE_PTR,CK_ULONG,CK_ATTRIBUTE_PTR,CK_ULONG,CK_OBJECT_HANDLE_PTR,CK_OBJECT_HANDLE_PTR)
CK_C_WrapKey=CFUNCTYPE(CK_RV,CK_SESSION_HANDLE,CK_MECHANISM_PTR,CK_OBJECT_HANDLE,CK_OBJECT_HANDLE,CK_BYTE_PTR,CK_ULONG_PTR)
CK_C_UnwrapKey=CFUNCTYPE(CK_RV,CK_SESSION_HANDLE,CK_MECHANISM_PTR,CK_OBJECT_HANDLE,CK_BYTE_PTR,CK_ULONG,CK_ATTRIBUTE_PTR,CK_ULONG,CK_OBJECT_HANDLE_PTR)
CK_C_DeriveKey=CFUNCTYPE(CK_RV,CK_SESSION_HANDLE,CK_MECHANISM_PTR,CK_OBJECT_HANDLE,CK_ATTRIBUTE_PTR,CK_ULONG,CK_OBJECT_HANDLE_PTR)
CK_C_SeedRandom=CFUNCTYPE(CK_RV,CK_SESSION_HANDLE,CK_BYTE_PTR,CK_ULONG)
CK_C_GenerateRandom=CFUNCTYPE(CK_RV,CK_SESSION_HANDLE,CK_BYTE_PTR,CK_ULONG)
CK_C_GetFunctionStatus=CFUNCTYPE(CK_RV,CK_SESSION_HANDLE)
CK_C_CancelFunction=CFUNCTYPE(CK_RV,CK_SESSION_HANDLE)
CK_C_WaitForSlotEvent=CFUNCTYPE(CK_RV,CK_FLAGS,CK_SLOT_ID_PTR,CK_VOID_PTR)


#Internal function pointers
CK_CREATEMUTEX=CFUNCTYPE(CK_RV,CK_VOID_PTR_PTR)
CK_DESTROYMUTEX=CFUNCTYPE(CK_RV,CK_VOID_PTR)
CK_LOCKMUTEX=CFUNCTYPE(CK_RV,CK_VOID_PTR)
CK_UNLOCKMUTEX=CFUNCTYPE(CK_RV,CK_VOID_PTR)

#Structure that represent the arguments for the C_Initialize function
class CK_C_INITIALIZE_ARGS(Structure):
	_fields_=[
			('CreateMutex',CK_CREATEMUTEX),
			('DestroyMutex',CK_DESTROYMUTEX),
			('LockMutex',CK_LOCKMUTEX),
			('UnlockMutex',CK_UNLOCKMUTEX),
			('flags',CK_FLAGS),
			('pReserved',CK_VOID_PTR)
		 ]


class CK_FUNCTION_LIST(Structure):
	_fields_=[
			('version',CK_VERSION),
			('C_Initialize',CK_C_Initialize),
			('C_Finalize',CK_C_Finalize),
			('C_GetInfo',CK_C_GetInfo),
			('C_GetSlotList',CK_C_GetSlotList),
			('C_GetSlotInfo',CK_C_GetSlotInfo),
			('C_GetTokenInfo',CK_C_GetTokenInfo),
			('C_GetMechanismList',CK_C_GetMechanismList),
			('C_GetMechanismInfo',CK_C_GetMechanismInfo),
			('C_InitToken',CK_C_InitToken),
			('C_InitPIN',CK_C_InitPIN),
			('C_SetPIN',CK_C_SetPIN),
			('C_OpenSession',CK_C_OpenSession),
			('C_CloseSession',CK_C_CloseSession),
			('C_CloseAllSessions',CK_C_CloseAllSessions),
			('C_GetSessionInfo',CK_C_GetSessionInfo),
			('C_GetOperationState',CK_C_GetOperationState),
			('C_SetOperationState',CK_C_SetOperationState),
			('C_Login',CK_C_Login),
			('C_Logout',CK_C_Logout),
			('C_CreateObject',CK_C_CreateObject),
			('C_CopyObject',CK_C_CopyObject),
			('C_DestroyObject',CK_C_DestroyObject),
			('C_GetObjectSize',CK_C_GetObjectSize),
			('C_GetAttributeValue',CK_C_GetAttributeValue),
			('C_SetAttributeValue',CK_C_SetAttributeValue),
			('C_FindObjetsInit',CK_C_FindObjectsInit),
			('C_FindObjects',CK_C_FindObjects),
			('C_FindObjectsFinal',CK_C_FindObjectsFinal),
			('C_EncryptInit',CK_C_EncryptInit),
			('C_Encrypt',CK_C_Encrypt),
			('C_EncryptUpdate',CK_C_EncryptUpdate),
			('C_EncryptFinal',CK_C_EncryptFinal),
			('C_DecryptInit',CK_C_DecryptInit),
			('C_DecryptUpdate',CK_C_DecryptUpdate),
			('C_DecryptFinal',CK_C_DecryptFinal),
			('C_DigestInit',CK_C_DigestInit),
			('C_Digest',CK_C_Digest),
			('C_DigestUpdate',CK_C_DigestUpdate),
			('C_DigestKey',CK_C_DigestKey),
			('C_DigestFinal',CK_C_DigestFinal),
			('C_SignInit',CK_C_SignInit),
			('C_Sign',CK_C_Sign),
			('C_SignUpdate',CK_C_SignUpdate),
			('C_SignFinal',CK_C_SignFinal),
			('C_SignRecoverInit',CK_C_SignRecoverInit),
			('C_SignRecover',CK_C_SignRecover),
			('C_VerifyInit',CK_C_VerifyInit),
			('C_Verify',CK_C_Verify),
			('C_VerifyUpdate',CK_C_VerifyUpdate),
			('C_VerifyFinal',CK_C_VerifyFinal),
			('C_VerifyRecoverInit',CK_C_VerifyRecoverInit),
			('C_VerifyRecover',CK_C_VerifyRecover),
			('C_DigestEncryptUpdate',CK_C_DigestEncryptUpdate),
			('C_DecryptDigestUpdate',CK_C_DecryptDigestUpdate),
			('C_SignEncryptUpdate',CK_C_SignEncryptUpdate),
			('C_DecryptVerifyUpdate',CK_C_DecryptVerifyUpdate),
			('C_GenerateKey',CK_C_GenerateKey),
			('C_GenerateKeyPair',CK_C_GenerateKeyPair),
			('C_WrapKey',CK_C_WrapKey),
			('C_UnwrapKey',CK_C_UnwrapKey),
			('C_DeriveKey',CK_C_DeriveKey),
			('C_SeedRandom',CK_C_SeedRandom),
			('C_GenerateRandom',CK_C_GenerateRandom),
			('C_GetFunctionStatus',CK_C_GetFunctionStatus),
			('C_CancelFunction',CK_C_CancelFunction),
			('C_WaitForSlotEvent',CK_C_WaitForSlotEvent)
		 ]


CK_FUNCTION_LIST_PTR=POINTER(CK_FUNCTION_LIST)


#Append the recursive property to the structure after defining it
#Ugly tweek but the only one I could get to resolve this issue
CK_C_GetFunctionList=CFUNCTYPE(CK_RV,CK_FUNCTION_LIST_PTR)
CK_FUNCTION_LIST._fields_.append(('C_GetFunctionList',CK_C_GetFunctionList))
